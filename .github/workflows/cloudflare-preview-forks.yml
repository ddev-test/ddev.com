# Tip: This workflow must be present on the base repo's default branch (e.g., main) for pull_request_target to trigger.
name: Cloudflare Pages preview (forked PRs)
# Requires a Cloudflare Pages project (Direct Upload). CF_PAGES_PROJECT must be that project name.
# No GitHub App integration is required for this workflow; deployments are done via API token.

on:
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review, closed]

# Least privilege at the workflow level
permissions:
  contents: read

concurrency:
  group: fork-preview-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  build:
    name: Build site (no secrets)
    if: ${{ github.event.pull_request.head.repo.fork == true && github.event.action != 'closed' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      # Optional repo variables for precise control (Settings > Secrets and variables > Actions > Variables)
      # If set, PAGES_BUILD_CMD will be executed and PAGES_OUTPUT_DIR used for packaging.
      PAGES_BUILD_CMD: ${{ vars.PAGES_BUILD_CMD }}
      PAGES_OUTPUT_DIR: ${{ vars.PAGES_OUTPUT_DIR }}
    steps:
      - name: Checkout PR code (from fork)
        uses: actions/checkout@v4
        with:
          # Important: explicit checkout of the fork + head SHA to avoid using base workflow code
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false

      - name: Print repo root for debugging
        run: |
          pwd
          ls -la

      - name: Setup Node.js (for common JS builds)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          check-latest: true

      - name: Build (auto-detect or use PAGES_BUILD_CMD)
        id: build
        run: |
          set -euo pipefail

          run_cmd() { echo "+ $*"; eval "$*"; }

          if [ -n "${PAGES_BUILD_CMD:-}" ]; then
            echo "Using PAGES_BUILD_CMD from repo variables: ${PAGES_BUILD_CMD}"
            run_cmd "${PAGES_BUILD_CMD}"
          else
            echo "Auto-detecting build system..."
            if [ -f "pnpm-lock.yaml" ]; then
              echo "Detected pnpm"
              corepack enable >/dev/null 2>&1 || true
              run_cmd "pnpm --version"
              run_cmd "pnpm install --frozen-lockfile"
              if jq -e '.scripts.build' package.json >/dev/null 2>&1; then
                run_cmd "pnpm run build"
              else
                echo "No build script found in package.json"; exit 1
              fi
            elif [ -f "yarn.lock" ]; then
              echo "Detected yarn"
              corepack enable >/dev/null 2>&1 || true
              run_cmd "yarn --version"
              run_cmd "yarn install --frozen-lockfile"
              if jq -e '.scripts.build' package.json >/dev/null 2>&1; then
                run_cmd "yarn build"
              else
                echo "No build script found in package.json"; exit 1
              fi
            elif [ -f "package-lock.json" ] || [ -f "package.json" ]; then
              echo "Detected npm"
              run_cmd "npm ci || npm install"
              if jq -e '.scripts.build' package.json >/dev/null 2>&1; then
                run_cmd "npm run build"
              else
                echo "No build script found in package.json"; exit 1
              fi
            elif [ -f "hugo.toml" ] || [ -f "hugo.yaml" ] || [ -f "hugo.yml" ] || [ -f "config.toml" ] || [ -f "config.yaml" ] || [ -f "config.yml" ]; then
              echo "Detected Hugo"
              sudo apt-get update -y
              sudo apt-get install -y hugo
              run_cmd "hugo version"
              run_cmd "hugo --minify"
            else
              echo "Could not detect build system. Set repo variable PAGES_BUILD_CMD (and optionally PAGES_OUTPUT_DIR)."
              exit 1
            fi
          fi

      - name: Determine output directory
        id: outdir
        run: |
          set -e
          if [ -n "${PAGES_OUTPUT_DIR:-}" ]; then
            OUTDIR="${PAGES_OUTPUT_DIR}"
          else
            # Try common static output directories in priority order
            for d in dist build .output/public .vercel/output/static out public site _site; do
              if [ -d "$d" ]; then OUTDIR="$d"; break; fi
            done
          fi
          if [ -z "${OUTDIR:-}" ] || [ ! -d "$OUTDIR" ]; then
            echo "Could not determine output directory. Set repo variable PAGES_OUTPUT_DIR to the static build output."
            echo "Checked candidates: ${PAGES_OUTPUT_DIR:-<not set>}, dist, build, .output/public, .vercel/output/static, out, public, site, _site"
            exit 1
          fi
          echo "Using output dir: $OUTDIR"
          echo "outdir=$OUTDIR" >> "$GITHUB_OUTPUT"

      - name: Package built site
        run: |
          mkdir -p artifact
          cp -a "${{ steps.outdir.outputs.outdir }}"/. artifact/
          echo "Packaged $(find artifact -type f | wc -l) files."

      - name: Upload built artifact
        uses: actions/upload-artifact@v4
        with:
          name: site-dist
          path: artifact
          if-no-files-found: error
          retention-days: 7

  deploy:
    name: Deploy preview to Cloudflare Pages
    if: ${{ github.event.pull_request.head.repo.fork == true && github.event.action != 'closed' }}
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Check required secrets
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_PAGES_PROJECT: ${{ secrets.CF_PAGES_PROJECT }}
        run: |
          missing=0
          for v in CF_API_TOKEN CF_ACCOUNT_ID CF_PAGES_PROJECT; do
            if [ -z "${!v}" ]; then
              echo "::error::Missing repository secret '$v'."
              missing=1
            fi
          done
          if [ "$missing" -ne 0 ]; then
            echo "Set CF_API_TOKEN, CF_ACCOUNT_ID, CF_PAGES_PROJECT in repo settings. CF_PAGES_PROJECT must be a Cloudflare Pages Direct Upload project."
            exit 1
          fi

      - name: Download built artifact
        uses: actions/download-artifact@v4
        with:
          name: site-dist
          path: site-dist

      - name: Publish to Cloudflare Pages (preview)
        id: pages
        uses: cloudflare/pages-action@v1
        with:
          # Required repo secrets (GitHub > Settings > Secrets and variables > Actions)
          # CF_PAGES_PROJECT should be a Pages project created as "Direct Upload" (no Git integration).
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          projectName: ${{ secrets.CF_PAGES_PROJECT }}
          directory: site-dist
          # Stable per-PR preview
          branch: pr-${{ github.event.pull_request.number }}
          commitHash: ${{ github.event.pull_request.head.sha }}
          wranglerVersion: '3'

      - name: Comment preview URL
        if: ${{ always() }}
        uses: actions/github-script@v7
        env:
          PREVIEW_URL: ${{ steps.pages.outputs.deployment-url || steps.pages.outputs.url || '' }}
        with:
          script: |
            const url = process.env.PREVIEW_URL;
            if (!url) {
              core.info('No preview URL found from Cloudflare action outputs.');
              return;
            }
            const body = `Cloudflare Pages preview: ${url}`;
            // Update existing bot comment if present; otherwise create a new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const existing = comments.find(c =>
              c.user.type === 'Bot' && c.body && c.body.includes('Cloudflare Pages preview:')
            );
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body,
              });
            }

  # Optional: do nothing on close (Cloudflare will mark preview inactive).
  # You can add a small comment on close if desired.
  closed-note:
    name: Note on PR close
    if: ${{ github.event.pull_request.head.repo.fork == true && github.event.action == 'closed' }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'PR closed. The Cloudflare Pages preview is no longer updated.',
            });
